args:
- default: true
  description: Name of the system from which to collect data
  name: system
  required: true
comment: Deprecated. No available replacement.
commonfields:
  id: Autoruns
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.7
    packID: D2
    packName: D2 (Deprecated)
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
deprecated: true
dockerimage: demisto/python:2.7.18.24398
engineinfo: {}
mainengineinfo: {}
name: Autoruns
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('Autoruns', 'start', __line__())



  respAR = demisto.executeCommand('D2Autoruns', {'using': demisto.args()['system']})
  if isError(respAR[0]):
      demisto.results(respAR)
  else:
      hashes = []
      try:
          try:
              lines = respAR[0]['Contents'][2:].decode('utf-16').encode('ascii').split('\r\n')
          except Exception:
              lines = respAR[0]['Contents'].split('\r\n')
          headers = lines[5].replace('\t', '|')
          try:
              hashCol = headers.split('|').index('MD5')
          except ValueError:
              hashCol = -1
          mdTable = headers + '\n'
          mdTable += '|'.join('---' * len(headers.split('|'))) + '\n'
          for line in lines[6:]:
              if hashCol > -1:
                  cells = line.split('\t')
                  if hashCol < len(cells) and cells[hashCol].strip():
                      hashes.append(cells[hashCol])
              mdTable += line.replace('\t', '|') + '\n'
          if hashes:
              appendContext('md5s', ', '.join(hashes), dedup=True)
          demisto.results({'Type': entryTypes['note'], 'ContentsFormat': formats['markdown'], 'Contents': mdTable})
      except Exception as ex:
          contents = "Error occurred while parsing output from D2Autoruns:\n"
          contents += str(ex) + '\n\nAutoruns output:\n' + respAR[0]['Contents']
          demisto.results({'Type': entryTypes['error'], 'ContentsFormat': formats['text'],
                          'Contents': contents})

  register_module_line('Autoruns', 'end', __line__())
scripttarget: 0
subtype: python2
system: true
tags:
- endpoint
- forensics
type: python
