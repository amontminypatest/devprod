args:
- default: true
  description: Admin user to use for compliance search
  name: username
  required: true
- description: Password for the specified user
  name: password
  required: true
  secret: true
- description: in seconds. Default is 5 mins. Max is 2 hours.
  name: timeout
- description: Query to use for finding mails
  name: query
  required: true
- description: Windows system to run the powershell script
  name: system
  required: true
- description: if set to "true" (case insensitive) - the script will also delete found
    emails. Default is false.
  name: delete
comment: Deprecated. No available replacement.
commonfields:
  id: O365SearchEmails
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.7
    packID: D2
    packName: D2 (Deprecated)
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
deprecated: true
dockerimage: demisto/python:2.7.18.24398
engineinfo: {}
mainengineinfo: {}
name: O365SearchEmails
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('O365SearchEmails', 'start', __line__())
  import re




  res = []
  dArgs = demisto.args()
  dArgs['using'] = dArgs['system']
  REGEX_RESULTS = r"Search results\: \{([^}]*)\}"

  delArg = demisto.get(dArgs, 'delete')
  if type(delArg) in [str] and delArg.lower() == 'true':
      demisto.info('[*] Script set to also delete found emails.')
      resCmdName = demisto.executeCommand("D2O365SearchAndDelete", dArgs)
  else:
      resCmdName = demisto.executeCommand("D2O365ComplianceSearch", dArgs)
  try:
      for entry in resCmdName:
          if isError(entry):
              res = resCmdName
              break
          else:
              myData = demisto.get(entry, 'Contents')
              match = re.search(REGEX_RESULTS, myData)
              if match and match.groups():
                  searchResults = match.groups()[0]
                  res.append({"Type": entryTypes["note"], "ContentsFormat": formats["text"], "Contents": searchResults})
  except Exception as ex:
      contents = "Error occurred while parsing output from command. Exception info:\n"
      contents += str(ex) + "\n\nInvalid output:\n" + str(resCmdName)
      res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                  "Contents": contents})
  demisto.results(res)

  register_module_line('O365SearchEmails', 'end', __line__())
scripttarget: 0
subtype: python2
system: true
tags:
- office365
- email
- response
type: python
