args:
- description: IPv4 addresses to filter, you can pass in a single IP, or an array.
  isArray: true
  name: ips
  required: true
- description: XSOAR list name which contains the comma separated CIDR Ranges to check
    (e.g. External IP Ranges)
  name: listname
  required: true
comment: Determines whether an IPv4 address is contained in one or more comma-delimited
  CIDR ranges.  You can pass in an array of IPs, and the name of the XSOAR list containing
  the comma separated list of CIDRs or /32 addresses.
commonfields:
  id: 9fe51cf2-f8f7-4a7b-83f2-a7eb9be5622b
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/netutils:1.0.0.5165
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CheckIPsinCIDRList
outputs:
- contextPath: InCIDR.Address
  description: IP Addresses in the CIDR Range
- contextPath: InCIDR.In
  description: The CIDR Range the IP was found in
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  from netaddr import IPAddress, IPNetwork

  def main():
      # get ips from the ips arg.
      ip_address = demisto.args().get('ips')

      # get the xsoar list with the ips/cidrs, and change it to an array.
      list_name = demisto.args().get('listname')
      cidr_range_list = [x.strip() for x in demisto.executeCommand('getList', {'listName': list_name})[0]['Contents'].split(',')]

      # handle if the list doesn't exist.
      if isError(cidr_range_list[0]):
          return_error('List not found')

      # check if ips is an array, or single value, change to array if a single IP was provided.
      if not isinstance(ip_address,list):
          ip_address = [ip_address]

      # check the ips against the cidr list
      in_range = []
      for ip in ip_address:
          for cidr in cidr_range_list:
              if IPAddress(ip) in IPNetwork(cidr):
                  in_range.append({"Address":ip,"In":cidr})
                  break

      # return only the IPs found to context.
      if in_range:
          readable = f"Found {len(in_range)} addresses in provided ranges"
          results = CommandResults(readable_output=readable,outputs=in_range,outputs_prefix="InCIDR")
          return_results(results)
      else:
          demisto.results("No IPs in ranges provided")

  if __name__ == "__builtin__" or __name__ == "builtins":
      main()
scripttarget: 0
subtype: python3
tags:
- Utilities
- training
type: python
