args:
- description: The Triton rule type - "dest_domain", "dest_ip", "dest_host" or "url_regex"
  name: type
  required: true
- description: The value to match for this rule (domain, regex, etc. depending on
    the type)
  name: value
  required: true
- description: If the Forcepoint Triton instance is configured as a RemoteAccess integration
    instance ‐ insert its name here. Replaces argument "tritonsystem".
  name: remoteaccessname
- description: System name of the linux host on which Forcepoint Triton is installed.
    Only use if not working with Triton as a RemoteAccess integration instance ‐ if
    so, use the "remoteaccessname" argument instead.
  name: tritonsystem
comment: Deletes a rule in Forcepoint Triton.
commonfields:
  id: FPDeleteRule
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.5
    packID: Forcepoint
    packName: Forcepoint
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - ssh
dockerimage: demisto/python3:3.10.6.33415
engineinfo: {}
mainengineinfo: {}
name: FPDeleteRule
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('FPDeleteRule', 'start', __line__())
  import sys
  from re import escape




  FILTER_CONFIG_PATH = "/opt/WCG/config/filter.config"
  CMD_DEL_RULE_FORMAT = "sed -i '/^{0}={1} action=[A-Za-z]*$/d' {2}"
  CMD_TRITON_RELOAD_CONFIG = "/opt/WCG/bin/content_line -x"  # && /opt/WCG/WCGAdmin runds"
  ALLOWED_TYPES = ["dest_domain", "dest_ip", "dest_host", "url_regex"]


  def delete_rule(ruleType):
      if ruleType not in ALLOWED_TYPES:
          demisto.results({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                           "Contents":
                               'Type argument must be "dest_domain", "dest_ip", "dest_host" or "url_regex".'
                               ' Invalid value: ' + ruleType})
      else:
          valueFormat = escape(demisto.args()["value"])
          if ruleType in ["dest_domain", "url_regex"]:
              valueFormat = r'\"' + valueFormat + r'\"'
          # sed command that deletes the rule
          cmdDelRule = CMD_DEL_RULE_FORMAT.format(ruleType, valueFormat, FILTER_CONFIG_PATH)
          sshArgs = {"cmd": cmdDelRule + " && " + CMD_TRITON_RELOAD_CONFIG}
          if "tritonsystem" in demisto.args():
              if "remoteaccessname" in demisto.args():
                  demisto.results({"Type": entryTypes["error"], "ContentsFormat": formats["markdown"],
                                   "Contents": "You cannot uses both **tritonsystem** and "
                                               "**remoteaccessname**. Please choose one."})
                  return
              sshArgs["system"] = demisto.args()["tritonsystem"]
          elif "remoteaccessname" in demisto.args():
              sshArgs["using"] = demisto.args()["remoteaccessname"]
          else:
              demisto.results({"Type": entryTypes["error"], "ContentsFormat": formats["markdown"],
                               "Contents": "You must provide either **tritonsystem** or"
                                           " **remoteaccessname** as arguments."})
              return
          if "using" in sshArgs or "system" in sshArgs:
              resSSH = demisto.executeCommand("ssh", sshArgs)
              if not isError(resSSH[0]) and demisto.gets(resSSH[0], "Contents.success"):
                  demisto.results("Command executed successfully.")
              else:
                  demisto.results(resSSH)


  def main():  # pragma: no cover
      ruleType = demisto.args()["type"]
      delete_rule(ruleType)
      sys.exit(0)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('FPDeleteRule', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- forcepoint
- triton
type: python
