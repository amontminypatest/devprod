comment: IoT vulnerability post processing script to resolve the vulnerability incident
  in IoT security portal using API
commonfields:
  id: iot-security-vuln-post-processing
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.16
    packID: PaloAltoNetworks_IoT
    packName: IoT by Palo Alto Networks
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: iot-security-vuln-post-processing
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('iot-security-vuln-post-processing', 'start', __line__())




  def _get_incident():
      return demisto.incidents()[0]


  def iot_resolve_vuln():
      incident = _get_incident()

      zb_ticketid = ""
      vulnerability_name = ""
      for label in incident['labels']:
          if label['type'] == 'zb_ticketid':
              zb_ticketid = label['value']
          if label['type'] == 'vulnerability_name':
              vulnerability_name = label['value']

      if zb_ticketid == "":
          raise Exception('zb_ticketid was not found in the incident labels')
      if vulnerability_name == "":
          raise Exception('vulnerability_name was not found in the incident labels')

      demisto.executeCommand('iot-security-resolve-vuln', {
          'id': zb_ticketid,
          'full_name': vulnerability_name,
          'reason': f'resolved by XSOAR incident {incident["id"]}'
      })


  def main():
      try:
          iot_resolve_vuln()
      except Exception as ex:
          return_error(f'Failed to execute iot-security-vuln-post-processing. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('iot-security-vuln-post-processing', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- iot
- post-processing
type: python
