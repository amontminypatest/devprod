args:
- default: true
  description: Display a specific watchlist by watchlist ID (numeric)
  name: id
comment: Display all watchlists and their details, queries, etc.
commonfields:
  id: CBWatchlists
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 2.1.25
    packID: Carbon_Black_Enterprise_Response
    packName: Carbon Black Enterprise Response
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - cb-watchlist-get
dockerimage: demisto/python3:3.10.6.33415
engineinfo: {}
mainengineinfo: {}
name: CBWatchlists
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CBWatchlists', 'start', __line__())




  def main():
      # args: id - Optional - only show the watchlist with this specific ID
      cols = ['name', 'search_query', 'id', 'enabled', 'search_timestamp', 'last_hit', 'last_hit_count', 'total_hits']
      res = []
      resCmd1 = demisto.executeCommand("cb-watchlist-get",
                                       {"watchlist-id": demisto.args()["id"]} if "id" in demisto.args() else {})
      for entry in resCmd1:
          if isError(entry):
              res.append(entry)
          else:
              matches = entry["Contents"]
              if matches:
                  if type(matches) == dict:
                      matches = [matches]
                  filtered_matches = [{k: m[k] for k in cols if k in m} for m in matches]
                  res.append(
                      {"Type": entryTypes["note"], "ContentsFormat": formats["table"], "Contents": filtered_matches})
              else:
                  res.append({"Type": entryTypes["note"], "ContentsFormat": formats["text"], "Contents": "No matches."})
      demisto.results(res)


  if __name__ in ['__main__', 'builtin', 'builtins']:
      main()

  register_module_line('CBWatchlists', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- carbon-black
type: python
